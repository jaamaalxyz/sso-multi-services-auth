# =============================================================================
# SSO Multi-Service NGINX Configuration
# =============================================================================
# This configuration routes traffic between three Next.js services:
# - Service A (Port 3000): Main authentication service
# - Service B (Port 3001): Secondary service 
# - Service C (Port 3002): Secondary service
#
# URL Routing:
# http://local.a.com/     → Service A (Main Auth)
# http://local.a.com/b/   → Service B (Secondary)
# http://local.a.com/c/   → Service C (Secondary)
# =============================================================================

# Event handling configuration
events {
    worker_connections 1024;   # Max connections per worker
    use kqueue;                # Efficient connection method for macOS
}

# Main HTTP configuration block
http {
    # ==========================================================================
    # MIME TYPES CONFIGURATION
    # ==========================================================================
    # Define file types that NGINX can serve (no external dependencies)
    types {
        # Web content types
        text/html                html htm shtml;
        text/css                 css;
        application/javascript   js;
        application/json         json;
        text/xml                 xml;
        text/plain               txt;
        
        # Image types
        image/gif                gif;
        image/jpeg               jpeg jpg;
        image/png                png;
        image/svg+xml            svg svgz;
        image/webp               webp;
        image/x-icon             ico;
        
        # Font types
        font/woff                woff;
        font/woff2               woff2;
        
        # Application types
        application/pdf          pdf;
        application/zip          zip;
    }
    
    default_type application/octet-stream;
    
    # ==========================================================================
    # LOGGING CONFIGURATION
    # ==========================================================================
    # Custom log format for debugging
    log_format detailed '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       'upstream: $upstream_addr '
                       'response_time: $upstream_response_time';
    
    # Log files (relative to nginx directory)
    access_log logs/access.log detailed;
    error_log  logs/error.log  info;
    
    # ==========================================================================
    # PERFORMANCE SETTINGS
    # ==========================================================================
    sendfile        on;         # Efficient file serving
    tcp_nopush      on;         # Optimize packet sending
    tcp_nodelay     on;         # Reduce latency
    keepalive_timeout 65;       # Keep connections alive
    client_max_body_size 100M;  # Max upload size
    
    # Gzip compression for better performance
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # ==========================================================================
    # UPSTREAM SERVERS CONFIGURATION
    # ==========================================================================
    # These define our Next.js services as backend servers
    
    # Service A: Main Authentication Service
    upstream service_a {
        server 127.0.0.1:3000 max_fails=3 fail_timeout=30s;
        keepalive 32;
        keepalive_requests 100;
    }
    
    # Service B: Secondary Service
    upstream service_b {
        server 127.0.0.1:3001 max_fails=3 fail_timeout=30s;
        keepalive 32;
        keepalive_requests 100;
    }
    
    # Service C: Secondary Service  
    upstream service_c {
        server 127.0.0.1:3002 max_fails=3 fail_timeout=30s;
        keepalive 32;
        keepalive_requests 100;
    }
    
    # ==========================================================================
    # MAIN SERVER CONFIGURATION
    # ==========================================================================
    server {
        # Server basics
        listen 80;
        server_name local.a.com;
        
        # Security headers for all responses
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        
        # ======================================================================
        # HEALTH CHECK ENDPOINT
        # ======================================================================
        location /health {
            access_log off;                    # Don't log health checks
            return 200 "SSO System Healthy\n";
            add_header Content-Type text/plain;
        }
        
        # ======================================================================
        # SERVICE A: MAIN AUTHENTICATION SERVICE
        # ======================================================================
        # Handles: /, /login, /signup, /api/auth/*, etc.
        location / {
            # Proxy to Service A
            proxy_pass http://service_a;
            
            # HTTP version and connection handling
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            
            # Forward client information
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-URI $request_uri;
            
            # Custom headers for service identification
            proxy_set_header X-Service-Name "service-a";
            proxy_set_header X-Service-Port "3000";
            
            # NextJS hot reload support (development)
            proxy_cache_bypass $http_upgrade;
            
            # Timeout settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings for performance
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }
        
        # ======================================================================
        # SERVICE B: SECONDARY SERVICE
        # ======================================================================
        # Handles: /b/*, removes /b prefix before forwarding
        location /b/ {
            # Remove /b prefix: /b/dashboard → /dashboard
            rewrite ^/b/(.*)$ /$1 break;
            
            # Proxy to Service B
            proxy_pass http://service_b;
            
            # HTTP version and connection handling
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            
            # Forward client information
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-URI $request_uri;
            
            # Custom headers for service identification
            proxy_set_header X-Service-Name "service-b";
            proxy_set_header X-Service-Port "3001";
            proxy_set_header X-Service-Prefix "/b";
            
            # Cookie handling for SSO
            proxy_pass_header Set-Cookie;
            proxy_pass_header Cookie;
            
            # NextJS hot reload support
            proxy_cache_bypass $http_upgrade;
            
            # Timeout settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }
        
        # ======================================================================
        # SERVICE C: SECONDARY SERVICE
        # ======================================================================
        # Handles: /c/*, removes /c prefix before forwarding
        location /c/ {
            # Remove /c prefix: /c/reports → /reports
            rewrite ^/c/(.*)$ /$1 break;
            
            # Proxy to Service C
            proxy_pass http://service_c;
            
            # HTTP version and connection handling
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            
            # Forward client information
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Original-URI $request_uri;
            
            # Custom headers for service identification
            proxy_set_header X-Service-Name "service-c";
            proxy_set_header X-Service-Port "3002";
            proxy_set_header X-Service-Prefix "/c";
            
            # Cookie handling for SSO
            proxy_pass_header Set-Cookie;
            proxy_pass_header Cookie;
            
            # NextJS hot reload support
            proxy_cache_bypass $http_upgrade;
            
            # Timeout settings
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }
        
        # ======================================================================
        # STATIC ASSETS OPTIMIZATION
        # ======================================================================
        # Cache static files for better performance
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            
            # Try to serve from the appropriate service
            # This will proxy to Service A by default for static assets
            proxy_pass http://service_a;
            proxy_set_header Host $host;
            
            # Don't log static asset requests
            access_log off;
        }
        
        # ======================================================================
        # API ROUTES HANDLING
        # ======================================================================
        # Ensure API routes go to the correct service
        
        # Service A API routes (auth, main APIs)
        location /api/ {
            proxy_pass http://service_a;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Service B API routes
        location /b/api/ {
            rewrite ^/b/api/(.*)$ /api/$1 break;
            proxy_pass http://service_b;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Service C API routes
        location /c/api/ {
            rewrite ^/c/api/(.*)$ /api/$1 break;
            proxy_pass http://service_c;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # ======================================================================
        # ERROR PAGES (Optional)
        # ======================================================================
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            return 500 "SSO System Error - Please try again later";
            add_header Content-Type text/plain;
        }
    }
}

# =============================================================================
# END OF CONFIGURATION
# =============================================================================
# 
# Quick Reference:
# - Start: sudo nginx -c $(pwd)/nginx.conf -p $(pwd)/
# - Test:  sudo nginx -t -c $(pwd)/nginx.conf -p $(pwd)/  
# - Stop:  sudo nginx -s quit
# - Reload: sudo nginx -s reload
#
# URLs:
# - http://local.a.com/        → Service A (Port 3000)
# - http://local.a.com/b/      → Service B (Port 3001) 
# - http://local.a.com/c/      → Service C (Port 3002)
# - http://local.a.com/health  → Health Check
# =============================================================================
